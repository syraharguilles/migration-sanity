/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type PortableText = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote' | 'strong' | 'b' | 'em' | 'i'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        _type: 'link'
        _key: string
        href: string
        title?: string
        target?: '_blank' | '_self'
      }>
      level?: number
      _type: 'block'
      _key: string
    }
  | {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
      _key: string
    }
  | columnsType
  | columnType  
  | InlineImage
  | tabsType
  | tabType 
  | productBlockType
  | mediaTextType  
  | horizontalRule
  | GallerysType
  | GalleryType
  | ({
      _key: string
    } & ExternalImage)
>

export type imageAssets = {
  _type: 'externalImage';
  _key?: string;
  asset?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset' | 'sanity.fileAsset';
  };
  hotspot?: SanityImageHotspot;

  crop?: SanityImageCrop;
  url?: string;         // For external URLs
  caption?: string;     // Optional image caption
  alt?: string;         // Alternative text
} | null;

export type InlineImage = {
  _type: 'inlineImage';
  _key?: string;
  imageAssets?: imageAssets;
};

// Represents a columns block (container of columns)
export type columnsType = {
  _type: 'columns';
  columns: columnType[]; // Array of Column objects
  _key: string;
};

// Represents a single column
export type columnType = {
  _type: 'column';
  content: PortableText; // Nested PortableText content
  _key: string;
};

export type tabsType = {
  _type: 'tabs';
  tabs: tabType[]; // Array of Column objects
  _key: string;
};


export type productBlockType = {
  _type: 'productBlock';
  _key: string;
  products: Array<{
    _key: string;
    productTitle: string;
    brand?: {
      name?: string;
      logo?: imageAssets;  // ✅ Updated to use shared type
    };
    partNumber?: string;
    price?: number;
    buttonLabel?: string;
    buttonLink?: string;
    externalImage?: imageAssets;   // ✅ Updated to use shared type
  }>;
};


export type tabType = {
  _type: 'tab';
  title: string;
  content: PortableText; // Nested PortableText content
  _key: string;
};


export type Product = {
  _id: string
  _type: 'product'
  _createdAt: string
  _updatedAt: string
  _rev: string

  title?: string
  slug?: { _type: 'slug'; current: string }
  sku?: string
  productType?: 'simple' | 'variable' | 'grouped' | 'external'
  price?: number
  salePrice?: number
  inStock?: boolean
  shortDescription?: string
  description?: PortableTextBlock[]
  featuredMedia?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  images?: Array<{
    _type: 'images_thumnails'
    asset?: { _ref: string; _type: 'reference'; _weak?: boolean }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
  }>
}

export type mediaTextType = {
  _type: 'mediaText';
  _key: string;
  imageAssets: imageAssets;
  imagePosition: 'left' | 'right';
  verticalAlignment: 'top' | 'center' | 'bottom';
  content: any[]; // Consider replacing with PortableTextBlock[] if strongly typed
};

export type GallerysType = {
  _type: 'gallerys';
  tabs: tabType[]; // Array of Column objects
  _key: string;
};

export type GalleryType = {
  _type: 'gallery'
  _key?: string
  mediaType: 'youtube' | 'image'

  // Only present if mediaType === 'image'
  externalImage?: {
    _type: 'externalImage'
    imageAssets: {
      _type: 'image'
      asset: {
        _type: 'reference'
        _ref: string
      }
      alt?: string
      caption?: string
    }
  }

  // Only present if mediaType === 'youtube'
  youtubeUrl?: string

  description?: PortableTextBlock[]
}

export type horizontalRule = {
  _type: 'horizontalRule';
}

export type TableType = {
  _type: 'table';
  title: string;
  rows: TableCellType[];
  headerRow?: TableCellType[];
  footerRow?: TableCellType[];
};

export type TableRowType = {
  _type: 'tableRow';
  _key: string;
  cells: TableCellType[];
};

export type TableCellType = {
  _type: 'tableCell';
  _key: string;
  content: PortableTextBlock[]; // Now supports rich text
  rowspan?: number;
  colspan?: number;
};

export type Tag = {
  _id: string
  _type: 'tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  date?: string
  modified?: string
  status?:
    | 'publish'
    | 'future'
    | 'draft'
    | 'pending'
    | 'private'
    | 'trash'
    | 'auto-draft'
    | 'inherit'
  rawHtml?: string
  content?: PortableText
  excerpt?: PortableText
  featuredMedia?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  sticky?: boolean
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
  categories?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'category'
  }>
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'tag'
  }>
}

export type Brands = {
  _id: string
  _type: 'brands'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  date?: string
  modified?: string
  status?:
    | 'publish'
    | 'future'
    | 'draft'
    | 'pending'
    | 'private'
    | 'trash'
    | 'auto-draft'
    | 'inherit'
  content?: PortableText
  excerpt?: PortableText
  featuredMedia?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  sticky?: boolean
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
}

export type VehicleGuides = {
  _id: string
  _type: 'vehicle-guides'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  date?: string
  modified?: string
  status?:
    | 'publish'
    | 'future'
    | 'draft'
    | 'pending'
    | 'private'
    | 'trash'
    | 'auto-draft'
    | 'inherit'
  content?: PortableText
  excerpt?: PortableText
  featuredMedia?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  sticky?: boolean
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
  vgCategory?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'vg-category'
  }>
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  date?: string
  modified?: string
  status?:
    | 'publish'
    | 'future'
    | 'draft'
    | 'pending'
    | 'private'
    | 'trash'
    | 'auto-draft'
    | 'inherit'
  content?: PortableText
  excerpt?: PortableText
  featuredMedia?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
}

export type Category = {
  _id: string
  _type: 'category'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
}

export type vgCategory = {
  _id: string
  _type: 'vg-category'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
}

export type Author = {
  _id: string
  _type: 'author'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  url?: string
  description?: string
  avatar?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | PortableText
  | ExternalImage
  | InlineImage
  | columnType
  | columnsType
  | tabsType
  | tabType
  | Tag
  | Post
  | Brands
  | VehicleGuides
  | vgCategory
  | mediaTextType
  | Page
  | Category
  | Author
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | productBlockType
  | SanityImageMetadata
  | Slug
  | hrType  
  | GallerysType
  | GalleryType  
export declare const internalGroqTypeReferenceTo: unique symbol
